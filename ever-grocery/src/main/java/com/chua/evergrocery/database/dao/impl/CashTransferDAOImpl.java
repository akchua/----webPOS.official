package com.chua.evergrocery.database.dao.impl;import java.util.Calendar;import java.util.Date;import java.util.List;import org.hibernate.criterion.Junction;import org.hibernate.criterion.Order;import org.hibernate.criterion.Restrictions;import org.springframework.stereotype.Repository;import com.chua.evergrocery.database.dao.CashTransferDAO;import com.chua.evergrocery.database.entity.CashTransfer;import com.chua.evergrocery.enums.Status;import com.chua.evergrocery.objects.ObjectList;/** * @author  Adrian Jasper K. Chua * @version 1.0 * @since   30 June 2018 */@Repositorypublic class CashTransferDAOImpl		extends AbstractDAO<CashTransfer, Long> 		implements CashTransferDAO {	@Override	public ObjectList<CashTransfer> findByRelatedUserAndDaysAgoOrStatusWithPagingAndOrder(int pageNumber, int resultsPerPage, Long userId,			Integer daysAgo, Status[] status, Order[] orders) {		final Junction conjunction = Restrictions.conjunction();		conjunction.add(Restrictions.eq("isValid", Boolean.TRUE));				if(userId != null) {			Junction disjunction = Restrictions.disjunction();			disjunction.add(Restrictions.eq("cashFrom.id", userId));			disjunction.add(Restrictions.eq("cashTo.id", userId));			conjunction.add(disjunction);		}				Junction disjunction2 = Restrictions.disjunction();				if(daysAgo != null) {			Calendar limitDate = Calendar.getInstance();			limitDate.add(Calendar.DAY_OF_MONTH, -daysAgo);						disjunction2.add(Restrictions.le("updatedOn", limitDate.getTime()));		}				if(status != null) {			for(Status stats : status) {				disjunction2.add(Restrictions.eq("status", stats));			}		}		conjunction.add(disjunction2);				return findAllByCriterion(pageNumber, resultsPerPage, null, null, null, orders, conjunction);	}	@Override	public List<CashTransfer> findAllByUserStatusAndDateTransferred(Long userId, Status[] status, Date dateFrom) {		final Junction conjunction = Restrictions.conjunction();		conjunction.add(Restrictions.eq("isValid", Boolean.TRUE));				if(userId != null) {			Junction disjunction = Restrictions.disjunction();			disjunction.add(Restrictions.eq("cashFrom.id", userId));			disjunction.add(Restrictions.eq("cashTo.id", userId));			conjunction.add(disjunction);		}				if(status != null) {			Junction disjunction = Restrictions.disjunction();			for(Status stats : status) {				disjunction.add(Restrictions.eq("status", stats));			}			conjunction.add(disjunction);		}				conjunction.add(Restrictions.ge("transferredOn", dateFrom));				return findAllByCriterionList(null, null, null, null, conjunction);	}}
